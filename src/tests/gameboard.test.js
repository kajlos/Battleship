import Gameboard from '../gameboard';
import Ship from '../ship';
describe('gameboard', () => {
  it('creates a gameboard', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    expect(newGameboard.board.length).toEqual(10);
    expect(newGameboard.board[0].length).toEqual(10);
    expect(newGameboard.board[0][0]).toBeDefined();
    expect(newGameboard.board[10]).toBeUndefined();
  });
  it('places a 1 length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(1);
    newGameboard.placeShip(newShip, [0, 1], 'vertical');
    newGameboard.placeShip(newShip, [2, 3], 'vertical');
    expect(newGameboard.board[0][1]).toBe(newShip);
    expect(newGameboard.board[2][3]).toBe(newShip);
  });
  it('places a 2 or more length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    let newShip2 = new Ship(3);
    newGameboard.placeShip(newShip, [0, 1], 'vertical');
    newGameboard.placeShip(newShip2, [5, 6], 'horizontal');
    expect(newGameboard.board[0][1]).toBe(newShip);
    expect(newGameboard.board[1][1]).toBe(newShip);
    expect(newGameboard.board[5][6]).toBe(newShip2);
    expect(newGameboard.board[5][7]).toBe(newShip2);
    expect(newGameboard.board[5][8]).toBe(newShip2);
  });
  it("doesn't create ship if ship would be outside gameboard", () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    let newShip2 = new Ship(2);
    newGameboard.placeShip(newShip, [9, 1], 'vertical');
    newGameboard.placeShip(newShip2, [1, 9], 'horizontal');
    expect(newGameboard.board[9][1]).toEqual('');
    expect(newGameboard.board[1][9]).toEqual('');
  });
  it('marks spots when placed 1 length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(1);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    expect(newGameboard.board[5][5]).toBe(newShip);
    expect(newGameboard.board[4][5]).toEqual('#');
    expect(newGameboard.board[4][4]).toEqual('#');
    expect(newGameboard.board[4][6]).toEqual('#');
    expect(newGameboard.board[5][4]).toEqual('#');
    expect(newGameboard.board[5][6]).toEqual('#');
    expect(newGameboard.board[6][5]).toEqual('#');
    expect(newGameboard.board[6][6]).toEqual('#');
    expect(newGameboard.board[6][4]).toEqual('#');
  });
  it('marks spots vertically when placed 2 length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    expect(newGameboard.board[5][5]).toBe(newShip);
    expect(newGameboard.board[6][5]).toBe(newShip);
    expect(newGameboard.board[4][4]).toEqual('#');
    expect(newGameboard.board[4][5]).toEqual('#');
    expect(newGameboard.board[4][6]).toEqual('#');
    expect(newGameboard.board[5][4]).toEqual('#');
    expect(newGameboard.board[5][6]).toEqual('#');
    expect(newGameboard.board[6][6]).toEqual('#');
    expect(newGameboard.board[6][4]).toEqual('#');
    expect(newGameboard.board[7][4]).toEqual('#');
    expect(newGameboard.board[7][5]).toEqual('#');
    expect(newGameboard.board[7][6]).toEqual('#');
  });
  it('marks spot horizontally when placed 2 length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'horizontal');
    expect(newGameboard.board[5][5]).toBe(newShip);
    expect(newGameboard.board[5][6]).toBe(newShip);
    expect(newGameboard.board[5][4]).toEqual('#');
    expect(newGameboard.board[4][4]).toEqual('#');
    expect(newGameboard.board[6][4]).toEqual('#');
    expect(newGameboard.board[4][5]).toEqual('#');
    expect(newGameboard.board[6][5]).toEqual('#');
    expect(newGameboard.board[4][6]).toEqual('#');
    expect(newGameboard.board[6][6]).toEqual('#');
    expect(newGameboard.board[4][7]).toEqual('#');
    expect(newGameboard.board[5][7]).toEqual('#');
    expect(newGameboard.board[6][7]).toEqual('#');
  });
  it('marks spot vertically when placed 3 length ship ', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(3);
    newGameboard.placeShip(newShip, [7, 0], 'vertical');
    expect(newGameboard.board[7][0]).toBe(newShip);
    expect(newGameboard.board[8][0]).toBe(newShip);
    expect(newGameboard.board[9][0]).toBe(newShip);
    expect(newGameboard.board[6][0]).toEqual('#');
    expect(newGameboard.board[6][1]).toEqual('#');
    expect(newGameboard.board[7][1]).toEqual('#');
    expect(newGameboard.board[8][1]).toEqual('#');
    expect(newGameboard.board[9][1]).toEqual('#');
  });
  it('marks spot horizontally when placed 3 length ship', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(3);
    newGameboard.placeShip(newShip, [9, 7], 'horizontal');
    expect(newGameboard.board[9][7]).toBe(newShip);
    expect(newGameboard.board[9][8]).toBe(newShip);
    expect(newGameboard.board[9][9]).toBe(newShip);
    expect(newGameboard.board[8][6]).toEqual('#');
    expect(newGameboard.board[9][6]).toEqual('#');
    expect(newGameboard.board[8][7]).toEqual('#');
    expect(newGameboard.board[8][8]).toEqual('#');
    expect(newGameboard.board[8][9]).toEqual('#');
  });
  it('recieves a attack', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    newGameboard.receiveAttack([5, 5]);
    expect(newGameboard.board[5][5]).not.toBe(newShip);
    expect(newShip.hits).toEqual([[5, 5]]);
  });
  it('recieves a missed attack', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    newGameboard.receiveAttack([0, 0]);
    expect(newGameboard.board[5][5]).toBe(newShip);
    expect(newShip.hits).toEqual([]);
    expect(newGameboard.board[0][0]).toBe('.');
  });
  it('returns false if not all ships are sunk', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(1);
    let newShip2 = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    newGameboard.placeShip(newShip2, [1, 1], 'horizontal');
    newGameboard.pushShips();
    expect(newGameboard.areAllShipsSunk()).toBe(false);
  });
  it('returns true if all ships are sunk', () => {
    let newGameboard = new Gameboard();
    newGameboard.init();
    let newShip = new Ship(1);
    let newShip2 = new Ship(2);
    newGameboard.placeShip(newShip, [5, 5], 'vertical');
    newGameboard.placeShip(newShip2, [1, 1], 'horizontal');
    newGameboard.pushShips();
    newGameboard.receiveAttack([5, 5]);
    newGameboard.receiveAttack([1, 1]);
    newGameboard.receiveAttack([1, 2]);
    expect(newGameboard.areAllShipsSunk()).toBe(true);
  });
});
